

#####################################################
############             java日志         ###########
#####################################################


#   %n - 换行
#   %m - 日志内容
#   %p - 日志级别(FATAL,   ERROR,   WARN,   INFO,   DEBUG   or   custom)
#   %r - 程序启动到现在的毫秒数
#   %% - percent   sign   in   output
#   %t - 当前线程名
#   %d   -  日期和时间,
#       常用的格式有 %d{DATE}, %d{ABSOLUTE}, %d{HH:mm:ss,SSS}, %d{ddMMyyyy HH:mm:ss,SSS}。。。
#   %l - 同 %F%L%C%M
#   %F - java源文件名
#   %L - java源码行数
#   %C - java类名,%C{1} 输出最后一个元素
#   %M-java方法名

#  加颜色   %clr(内容){颜色名字}   blue cyan faint green magenta red yellow

logging:
  file:
    name: /Java/file/springboot.log
    max-history: 14
    max-size: 100MB #日志文件达到100MB以后 就会自动分包 springboot.log.2020-07-23.数字.gz
  pattern:
    console: '%clr(%d{MM/dd HH:mm:ss.SSS}){magenta} [%t] %clr(%p){red} %clr(%C{0}.%M.java:%L){cyan}: %m %n'
    file: '%d{MM/dd HH:mm:ss.SSS} [%t] %p %C{0}.%M.java:%L: %m %n'
  level:
    web: debug # 可以看到springMVC中的一些初始化 比如加载filter的顺序和过滤规则 Servlet的过滤规则
#    root: info
#    sql: debug
    org:
      hibernate: error
      springframework:
        web: debug
      springboot:
        study: debug

#####################################################
############      tomcat 访问日志         ###########
#####################################################
#  pattern的配置：
#  %a - 远程ip地址，注意不一定是原始ip地址，中间可能经过nginx等的转发
#  %A - 本地ip
#  %b - 发送的字节数，不包括HTTP标头，或者如果没有字节发送则使用’ - ‘
#  %B - 发送的字节数，不包括HTTP标头
#  %h - 远程主机名（或IP地址，如果连接器的enableLookups为false）
#  %H - 请求协议
#  %l - Remote logical username from identd (always returns ‘-‘)
#  %m - 请求方法（GET，POST)
#  %p - 接受请求的本地端口
#  %q - 查询字符串（如果存在则用’?’作为前缀，否则为空字符串）
#  %r - HTTP请求的第一行（包括请求方法，请求的URI）
#  %s - HTTP的响应代码，如：200,404
#  %S - User session ID
#  %t - 日期和时间，Common Log Format格式
#  %u - 被认证的远程用户
#  %U - Requested URL path
#  %v - Local server name
#  %D - Time taken to process the request, in millis
#  %T - Time taken to process the request, in seconds
#  %I - 当前请求的线程名，可以和打印的log对比查找问题
server:
  tomcat:
    accesslog:
      buffered: true # 缓存日志定期刷新输出（建议设置为true，否则当有请求立即打印日志对服务的响应会有影响）
      enabled: true # 是否开启访问日志
      rotate: true # 是否启用访问日志分割
      directory: E:\Java\file # 日志文件路径，可以是相对于tomcat的路径也可是绝对路径
      pattern: common  #combined common两种内嵌格式 日志格式
      rename-on-rotate: false # 推迟在文件名中加入日期标记，直到日志分割时
      request-attributes-enabled: false # 为请求使用的IP地址，主机名，协议和端口设置请求属性

      prefix: access-log
      file-date-format: .yyyy-MM-dd # 放在日志文件名中的日期格式
      suffix: .log    # 日志file命名：[prefix+file-date-format+suffix] 例如：access-log.2021-02-01.log
